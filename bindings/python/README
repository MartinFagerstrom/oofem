/*
 *
 *                 #####    #####   ######  ######  ###   ###
 *               ##   ##  ##   ##  ##      ##      ## ### ##
 *              ##   ##  ##   ##  ####    ####    ##  #  ##
 *             ##   ##  ##   ##  ##      ##      ##     ##
 *            ##   ##  ##   ##  ##      ##      ##     ##
 *            #####    #####   ##      ######  ##     ##
 *
 *
 *             OOFEM : Object Oriented Finite Element Code
 *
 *               Copyright (C) 1993 - 2012   Borek Patzak
 *
 *
 *
 *       Czech Technical University, Faculty of Civil Engineering,
 *   Department of Structural Mechanics, 166 29 Prague, Czech Republic
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

CONTENTS:

[1]   What is here
[2]   Pre-requisites
[3]   Installation
[4]   Related Links

[1] What is here
==============================================================================
The directory tree below holds source code to generate OOFEM Python interface
using Boost.Python. This interface allows to use oofem just like regular Python
modules.

[2]   Pre-requisites
==============================================================================
- Get Boost (www.boost.org)
- Get the bjam build driver
 

[3]   Installation (Unix, Linux)
==============================================================================
- configure and build oofem-debug target without any external modules.
  (if you want to include external modules, you have to add module library
   manually by editing Jamroot configuration file).
- change directory to python located in oofem top directory.
- make a symbolic link named "boost" in this directory, pointing to your 
  Boost root directory. 
  Or, alternatively, edit Jamroot and boost-build.jam files and adjust path
  referring to the Boost root directory.

- run bjam

- If glibc error is reported (*** glibc detected *** malloc() / free()/ double), use
  export MALLOC_CHECK_=0

- Optionally, to run a simple example:
  - Set PYTHONPATH to contain paths to directory containing oofem python directory:
    export PYTHONPATH=$PYTHONPATH:{PATH_TO_OOFEM_TOP_DIR}/bindings/python/bin/gcc-4.6/debug

  - Set LD_LIBRARY_PATH to point to boost generated libraries of oofem 
    python module. This path can be best obtained from "bjam -d+2" 
    when compiling oofem python module.

    export LD_LIBRARY_PATH={PATH_TO_BOOST_ROOT}/bin.v2/libs/python/build/gcc-4.6/debug:\
           {PATH_TO_OOFEM_TOP_DIR}/bindings/python/bin/gcc-4.6/debug:$LD_LIBRARY_PATH

    Replace {PATH_TO_BOOST_ROOT} by the path to your Boost root dir and {PATH_TO_OOFEM_TOP_DIR}
    by the path to oofem top directory

   - Run the test as:
     python test.py

[3]   Installation (Windows)
==============================================================================
3.1 Install the latest boost libraries distribution from http://www.boost.org/users/download/
    - extract the boost library archive into oofem top directory 
      (e.g., boost_library_1_48 directory with boost lib installation should be created)

3.2 Build Boost library 
    - change your current directory to the Boost root directory
    - run "bootstrap.bat"
    - run ".\b2 --with-python"
    #the next is manual fix of bug in boost python liking procedure
    - copy stage\lib\boost_python-vc100-mt-gd-1_48.lib to the c:\python26\libs directory 
      (since jam calls Linker with that path included as lib path) 

3.3 Build and install boost build 
    - go to the directory tools\build\v2 of your boost library dir
    - run "bootstrap.bat"
    - run "b2 install --prefix=PREFIX", where PREFIX is the directory where you want
      boost.build to be installed (suggested YOUR_OOFEM_TOP_DIR/boost.build)

3.4 Build oofem python library
    - go to the directory bindings/python in your oofem top dir
    - run bjam.exe, where bjam.exe is located in boost.build\bin directory (see step (3)):
      > ..\..\boost.build\bin\bjam.exe -d+2
    - watch output for lines with Path and PYTHONPATH variables, should look like following:
      > set Path=C:\Program Files\Python26;C:\Program Files\Python26\libs;.....
      > set PYTHONPATH=bin\msvc-10.0\debug

    - in the same command prompt window, set these two variables as shown in 
      listing (could be copied and pasted)
    - run the simple example by issuing "python test01.py"

[4] Further documentation
==============================================================================
- Boost C++ libraries (www.boost.org)
- OOFEM project (www.oofem.org)

Bugs
==============================================================================

Please mail all bug reports and suggestions to [info@oofem.org]. I will try to
give satisfaction, if the time is at least partially on my side. 


                                Enjoy
                                        Borek Patzak

