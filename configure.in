dnl Process this file with autoconf to produce a configure script

dnl - following options added
dnl
dnl Module options
dnl
dnl   --enable-iml           --disable-iml
dnl   --enable-tinyxml       --disable-tinyxml
dnl   --enable-sm            --disable-sm
dnl   --enable-tm            --disable-tm
dnl   --enable-fm            --disable-fm
dnl   --enable-spooles       --disable-spooles
dnl   --enable-petsc         --disable-petsc
dnl   --enable-slepc         --disable-slepc
dnl   --with-PETSCDIR[=PETSC_DIR]
dnl   --with-PETCSARCH=PETSC_ARCH
dnl   --with-SLEPCDIR[=SLEPC_DIR]
dnl   --enable-dss           --disble-dss
dnl   --enable-parmetis      --disable-parmetis
dnl   --with-PARMETISDIR[=PARMETIS_DIR]
dnl   --enable-mpi           --disble-mpi
dnl   --with-MPIDIR[=MPI_DIR]
dnl   --with-CKITDIR[=CKIT_DIR]
dnl   --with-ELIXIRDIR[=ELIXIR_DIR]
dnl
dnl Code generation
dnl 
dnl   --enable-oofeg,      --disable-oofeg
dnl   --enable-poofem,     --disable-poofem
dnl   --enable-oofeg-devel-interface --disable-oofeg-devel-interface
dnl
dnl

dnl --------------------------------------------------------------------
dnl Default values of implemented options
dnl --------------------------------------------------------------------
OOFEM_TARGET=default
sm_module=yes
tm_module=yes
fm_module=yes
iml_module=no
tinyxml_module=no
spooles_module=no
petsc_module=no
slepc_module=no
dss_module=no
mpi_module=no
parmetis_module=no

oofeg_val=no
poofem_val=no
oofeg_di=no

LOCAL_LIBS=""
MPI_DIR=""


AC_INIT(src/oofemlib/element.h)

dnl --------------------------------------------------------------------
dnl check if PWD variable is defined
dnl --------------------------------------------------------------------
if test x"$PWD" = x""; then
    PWD=`pwd`
fi

if test x"$CXXFLAGS" = x""; then
    cflags=no
else
    cflags=yes
fi

dnl --------------------------------------------------------------------
dnl Check system type.
dnl --------------------------------------------------------------------
AC_CANONICAL_HOST

dnl default prog name
PROG_NAME=oofem


dnl --------------------------------------------------------------------
dnl Determine oofem top dir
dnl --------------------------------------------------------------------
AC_ARG_VAR(OOFEM_DIR, sets the oofem top dir)
AC_MSG_CHECKING(OOFEM_DIR)
if test -f $OOFEM_DIR/src/oofemlib/cltypes.h; then
     AC_MSG_RESULT($OOFEM_DIR)                     
elif test -f $PWD/src/oofemlib/cltypes.h; then
     OOFEM_DIR=$PWD
     AC_MSG_RESULT($OOFEM_DIR)                     
else
     AC_MSG_ERROR("DSS slover not found in $PWD/dss")     
fi

dnl --------------------------------------------------------------------
dnl Check target
dnl --------------------------------------------------------------------
AC_ARG_VAR(OOFEM_TARGET, sets the target name)
if test x"$OOFEM_TARGET" = x"";  then
     echo OOFEM_TARGET not specified, using default 
     OOFEM_TARGET=default
fi

echo configuring OOFEM_TARGET="$OOFEM_TARGET"
if test -d targets/$OOFEM_TARGET; then
     echo existing target directory found
else
     mkdir -p targets/$OOFEM_TARGET
fi
mkdir  -p targets/$OOFEM_TARGET/lib
mkdir  -p targets/$OOFEM_TARGET/lib/oofemlib
mkdir  -p targets/$OOFEM_TARGET/lib/sm
mkdir  -p targets/$OOFEM_TARGET/lib/tm
mkdir  -p targets/$OOFEM_TARGET/lib/fm
mkdir  -p targets/$OOFEM_TARGET/lib/dss
mkdir  -p targets/$OOFEM_TARGET/lib/main
mkdir  -p targets/$OOFEM_TARGET/include
cp base/target_makefile.in targets/$OOFEM_TARGET/makefile.in
cp base/oofemlib_makefile.in targets/$OOFEM_TARGET/lib/oofemlib/makefile.in
cp base/sm_makefile.in targets/$OOFEM_TARGET/lib/sm/makefile.in
cp base/tm_makefile.in targets/$OOFEM_TARGET/lib/tm/makefile.in
cp base/fm_makefile.in targets/$OOFEM_TARGET/lib/fm/makefile.in
cp base/dss_makefile.in targets/$OOFEM_TARGET/lib/dss/makefile.in
cp base/main_makefile.in targets/$OOFEM_TARGET/lib/main/makefile.in
cp base/oofemcfg.h.in targets/$OOFEM_TARGET/include
cp base/oofemdef.h.in targets/$OOFEM_TARGET/include
echo target directory configured


dnl --------------------------------------------------------------------
dnl Checks for programs.
dnl --------------------------------------------------------------------

AC_PROG_CXX
AC_PROG_CXXCPP
AC_LANG_CPLUSPLUS
AC_PROG_INSTALL
AC_PROG_RANLIB
AC_PROG_MAKE_SET


dnl --------------------------------------------------------------------
dnl Checks for header files.
dnl --------------------------------------------------------------------
AC_HEADER_STDC
AC_CHECK_HEADERS(limits.h malloc.h strings.h unistd.h sys/time.h sys/resource.h)

dnl --------------------------------------------------------------------
dnl Checks for typedefs, structures, and compiler characteristics.
dnl --------------------------------------------------------------------
AC_HEADER_TIME

dnl --------------------------------------------------------------------
dnl Checks for library functions.
dnl --------------------------------------------------------------------
AC_CHECK_FUNCS(strstr strtod strtol strncasecmp access)

dnl --------------------------------------------------------------------
dnl Checks for math library functions.
dnl --------------------------------------------------------------------
AC_CHECK_FUNCS(nearest)
AC_CHECK_FUNCS(cbrt)

dnl --------------------------------------------------------------------
dnl check for enum {FALSE=0, TRUE = 1};
dnl --------------------------------------------------------------------
AC_MSG_CHECKING([FALSE, TRUE enum/constants])
AC_TRY_COMPILE([#include<stdio.h>],[if (1) return FALSE; else return TRUE;], [
AC_MSG_RESULT(yes)
AC_DEFINE(HAVE_FALSETRUE,,Define if bool type is defined)
],
[
AC_MSG_RESULT(no)
])

dnl --------------------------------------------------------------------
dnl check for bool type {false=0, true = 1};
dnl --------------------------------------------------------------------
AC_MSG_CHECKING([typedef bool])
AC_TRY_COMPILE([#include<stdio.h>],[bool val = true;], [
AC_MSG_RESULT(yes)
AC_DEFINE(HAVE_BOOLTYPE,,)
],
[
AC_MSG_RESULT(no)
])

dnl --------------------------------------------------------------------
dnl check for M_PI
dnl --------------------------------------------------------------------
AC_MSG_CHECKING(M_PI constant)
AC_TRY_COMPILE([#include<math.h>],[double a = M_PI;], [
AC_MSG_RESULT(yes)
AC_DEFINE(HAVE_M_PI,,Define if M_PI is defined)
],
[
AC_MSG_RESULT(no)
])

dnl --------------------------------------------------------------------
dnl check for M_LN2
dnl --------------------------------------------------------------------
AC_MSG_CHECKING(M_LN2 constant)
AC_TRY_COMPILE([#include<math.h>],[double a = M_LN2;], [
AC_MSG_RESULT(yes)
AC_DEFINE(HAVE_M_LN2,,Define if M_LN2 is defined)
],
[
AC_MSG_RESULT(no)
])

dnl --------------------------------------------------------------------
dnl check for STL
dnl --------------------------------------------------------------------
AC_MSG_CHECKING(STL support)
AC_TRY_COMPILE([#include<vector>],[std::vector<int> a; a.push_back(12);], [
AC_MSG_RESULT(yes)
],
[
AC_MSG_RESULT(no)
echo "STL library is required to compile OOFEM."
exit
])

dnl --------------------------------------------------------------------
dnl check for Macro VA_ARGS support
dnl --------------------------------------------------------------------
AC_MSG_CHECKING(Macro __VA_ARGS__ support)
AC_TRY_COMPILE(
[
#include <stdio.h>
#define LOG_FATAL(file,...) fprintf (file, __VA_ARGS__)
],
[
LOG_FATAL(stderr, "%s", "huhu");
],
[
AC_MSG_RESULT(yes)
AC_DEFINE(HAVE_MACRO_VA_ARGS,,Define if __VA_ARGS__ is supported)
],
[
AC_MSG_RESULT(no)
])

dnl --------------------------------------------------------------------
dnl check for Function Templates support
dnl --------------------------------------------------------------------
AC_MSG_CHECKING(Function Templates support)
AC_TRY_COMPILE(
[
#include<vector>
using namespace std;

template<class T> void sort (vector<T>& v) { int n=v.size();
for(int gap=n/2;0<gap;gap/=2)
for(int i=gap;i<n;i++)
for(int j=i-gap;0<=j;j-=gap)
if (v[j+gap]<v[j]) swap(v[j],v[j+gap]);
}
void f(vector<int>&vi) {sort(vi);}],
[
vector<int> a;
a.push_back(3);
a.push_back(8);
f(a);],
[
AC_MSG_RESULT(yes)],
[
AC_MSG_RESULT(no)
echo "c++ compiler support for function templates required."
exit])

dnl --------------------------------------------------------------------
dnl check for variable array size declaration
dnl --------------------------------------------------------------------
AC_MSG_CHECKING([Variable array size declaration])
AC_TRY_COMPILE([],
[
int i, size = 10;
double vec[size];
for (i=0; i<size; i++) vec[i]=0.0;
],
[
AC_MSG_RESULT(yes)
AC_DEFINE(HAVE_VARIABLE_ARRAY_SIZE,,Define if varaible array size declarations are supported)
],
[
AC_MSG_RESULT(no)
])

dnl
dnl --------------------------------------------------------------------
dnl test for poofem related stuff
dnl --------------------------------------------------------------------
dnl

AC_ARG_ENABLE(poofem, [  --enable-poofem         builds and installs poofem],
    [
        poofem_val=$enableval
        PROG_NAME="poofem"
    ]
)


dnl
dnl --------------------------------------------------------------------
dnl assemble targets
dnl --------------------------------------------------------------------
dnl

dnl --------------------------------------------------------------------
dnl Check for iml module
dnl --------------------------------------------------------------------
AC_ARG_ENABLE(iml, [  --enable-iml            adds iml module],
    [
        iml_module=$enableval
    ],
    [
        iml_module=no
    ]
)

AC_ARG_WITH(IMLDIR, [  --with-IMLDIR=dir       allows to specify IML_DIR] , 
   [
       IML_DIR=$withval
   ]
)

dnl --------------------------------------------------------------------
dnl Check for tinyxml module
dnl --------------------------------------------------------------------
AC_ARG_ENABLE(tinyxml, [  --enable-tinyxml            adds tinyxml module],
    [
        tinyxml_module=$enableval
    ],
    [
        tinyxml_module=no
    ]
)

AC_ARG_WITH(TINYXMLDIR, [  --with-TINYXMLDIR=dir       allows to specify TINYXML_DIR] , 
   [
       TINYXML_DIR=$withval
   ]
)


dnl --------------------------------------------------------------------
dnl Check for spooles module
dnl --------------------------------------------------------------------
AC_ARG_ENABLE(spooles, [  --enable-spooles        adds spooles module support],
     [
         spooles_module=$enableval
     ],
    [
    spooles_module=no
    ]
)

AC_ARG_WITH(SPOOLESDIR, [  --with-SPOOLESDIR=dir   allows to specify SPOOLES_DIR] , 
 [
     SPOOLES_DIR=$withval
 ]
)

dnl --------------------------------------------------------------------
dnl Check for dss module
dnl --------------------------------------------------------------------
AC_ARG_ENABLE(dss, [  --enable-dss            adds dss module support],
     [
         dss_module=$enableval
     ],
    [
     dss_module=no
    ]
)

dnl--------------------------------------------------------------------
dnl Check for MPI
dnl --------------------------------------------------------------------
AC_ARG_ENABLE(mpi, [  --enable-mpi        adds mpi library support],
     [
         mpi_module=$enableval
     ],
    [
	 mpi_module=no
    ]
)

AC_ARG_WITH(MPIDIR, [  --with-MPIDIR=dir       allows to specify MPI_DIR] , 
 [
     MPI_DIR=$withval
 ]
)



dnl --------------------------------------------------------------------
dnl Check for petsc module
dnl --------------------------------------------------------------------
AC_ARG_ENABLE(petsc, [  --enable-petsc          adds PETSc module support],
 [
          petsc_module=$enableval
 ],                  
 [
      petsc_module=no
 ]
)

AC_ARG_WITH(PETSCDIR, [  --with-PETSCDIR=dir     allows to specify PETSC_DIR] , 
 [
dnl   if test -d $withval
dnl   then
     PETSC_DIR=$withval
dnl   fi
 ]
)

AC_ARG_WITH(PETSCARCH, [  --with-PETSCARCH=val    allows to specify PETSC_ARCH] , 
 [
   PETSC_ARCH=$withval
 ]
)

dnl --------------------------------------------------------------------
dnl Check for slepc module
dnl --------------------------------------------------------------------
AC_ARG_ENABLE(slepc, [  --enable-slepc          adds SLEPc module support],
 [
          slepc_module=$enableval
 ],                  
 [
      slepc_module=no
 ]
)

AC_ARG_WITH(SLEPCDIR, [  --with-SLEPCDIR=dir     allows to specify SLEPC_DIR] , 
 [
dnl   if test -d $withval
dnl   then
     SLEPC_DIR=$withval
dnl   fi
 ]
)

dnl --------------------------------------------------------------------
dnl Check for parmetis module
dnl --------------------------------------------------------------------
AC_ARG_ENABLE(parmetis, [  --enable-parmetis       adds ParMETIS module support],
 [
          parmetis_module=$enableval
 ],                  
 [
      parmetis_module=no
 ]
)

AC_ARG_WITH(PARMETISDIR, [  --with-PARMETISDIR=dir  allows to specify ParMETIS_DIR] , 
 [
     PARMETIS_DIR=$withval
 ]
)

dnl ,
dnl  [ 
dnl  ])

dnl AC_ARG_VAR(PETSC_DIR, Allows to set PETSC_DIR, a directory contatining PETSC distribution])
dnl AC_ARG_VAR(PETSC_ARCH, Allows to set PETSC_ARCH, a variable determining PETS Architecture])

dnl --------------------------------------------------------------------
dnl Check for internal oofem modules
dnl --------------------------------------------------------------------
AC_ARG_ENABLE(sm, [  --enable-sm             adds sm module],
     [
         sm_module=$enableval
     ],
    [
    sm_module=yes
    ]
)

AC_ARG_ENABLE(tm, [  --enable-tm             adds tm module],
     [
         tm_module=$enableval
     ],
    [
    tm_module=yes
    ]
)

AC_ARG_ENABLE(fm, [  --enable-fm             adds fm module],
     [
         fm_module=$enableval
     ],
    [
      fm_module=yes
    ]
)

dnl --------------------------------------------------------------------
dnl Checks for libraries.
dnl --------------------------------------------------------------------

dnl Replace `main' with a function in -lm:
AC_CHECK_LIB(m, sqrt)

AC_ARG_ENABLE(oofeg, [  --enable-oofeg          builds and installs oofeg],
     [
         oofeg_val=$enableval
        PROG_NAME="oofeg"

     ]
)

dnl --------------------------------------------------------------------
dnl define PROG SYMBOL
dnl --------------------------------------------------------------------
if test x$poofem_val = xyes; then
   MODULE_SYMBOLS="-D__OOFEM -D__PARALLEL_MODE"
elif test x$oofeg_val = xyes; then
   MODULE_SYMBOLS="-D__OOFEG"
else
   MODULE_SYMBOLS="-D__OOFEM"    
fi


dnl --------------------------------------------------------------------
dnl Search for iml module
dnl --------------------------------------------------------------------
if test x$iml_module = xyes; then
    AC_MSG_CHECKING(IML module location)
    if test -f ${PWD}/iml/gmres.h && test -z ${IML_DIR} ; then
        AC_MSG_RESULT(${PWD}/iml)
        IML_INCLUDES="-I${PWD}"
    elif test -f $IML_DIR/iml/gmres.h; then
          IML_INCLUDES="-I${IML_DIR}"
          AC_MSG_RESULT(${IML_DIR}/iml)
    else
        while true; do
            read -p "Type in IML directory (use absolute path, excluding the last iml/ directory):" IML_DIR
            if test -e ${IML_DIR}/iml/gmres.h ; then
                IML_INCLUDES="-I${IML_DIR}"
                break;
            else
                echo "IML includes not found under ${IML_DIR}/iml"
            fi
        done
    fi
fi

DSS_MAKEFILE=""
dnl --------------------------------------------------------------------
dnl Search for dss module
dnl --------------------------------------------------------------------
if test x$dss_module = xyes; then
    AC_MSG_CHECKING(dss module location)
        dir=src/dss
        if test -f $dir/DSSolver.h; then
            AC_MSG_RESULT($dir)
        else
            AC_MSG_ERROR("DSS slover not found in $PWD/dss")
        fi
        DSS_INCLUDES="-I$PWD/$dir"
    DSS_DIR="$PWD/$dir"
    DSS_MAKEFILE="$dir/makefile"
fi


dnl --------------------------------------------------------------------
dnl Search for spooles module
dnl --------------------------------------------------------------------
if test x$spooles_module = xyes; then
    AC_MSG_CHECKING(SPOOLES module location)
  dir=$SPOOLES_DIR
      dnl $PWD/../spooles
  if test -f $dir/InpMtx.h; then
    AC_MSG_RESULT($dir)
  else
    while test ! -f $dir/InpMtx.h; do
      echo "Directory $dir does not seem to be spooles dir."
      echo "Type in directory (use absolute path):"
      read dir
    done;
  fi
  SPOOLES_INCLUDES="-I$dir"

  SPOOLES_LIB="-L?"
  AC_CHECK_LIB(spooles, InpMtx_new,
    [
        SPOOLES_LIB="-lspooles"
        AC_DEFINE(HAVE_LIBSPOOLES)
    ],
    [
        dir=$SPOOLES_DIR
        AC_MSG_CHECKING(guess of spooles.a location)
        if test -f $dir/spooles.a; then
            AC_MSG_RESULT($dir)
        else
            while test ! -f $dir/spooles.a; do
                echo "Spooles library not found in $dir."
                echo "Type in directory (use absolute path):"
                read dir
            done;
        fi
        SPOOLES_LIB="$dir/spooles.a"
        AC_DEFINE(HAVE_LIBSPOOLES)
    ]
  )
fi


dnl --------------------------------------------------------------------
dnl Search for mpi module
dnl --------------------------------------------------------------------
dnl
if test x$petsc_module = xyes; then 
  mpi_module="yes"
fi
if test x$poofem_val = xyes; then
  mpi_module="yes"
fi

if test x$mpi_module = xyes; then
   AC_DEFINE(HAVE_MPI_H)
   MODULE_SYMBOLS="$MODULE_SYMBOLS -DMPICH_IGNORE_CXX_SEEK"

   if [ ${MPI_dir} ];  then
   
     dnl parmetis requires mpi
     AC_MSG_CHECKING(MPI location)

       if test -f ${MPI_DIR}/include/mpi.h; then
       	  AC_MSG_RESULT(${MPI_DIR})
       else	  
           while test ! -f ${MPI_DIR}/include/mpi.h; do
	         echo "Directory ${MPI_DIR} does not seem to be MPI dir."
		 echo "Type in directory (use absolute path):"
		 read MPI_DIR
	   done;
       fi
       MPI_INCLUDES="-I${MPI_DIR}/include"
       AC_DEFINE(HAVE_MPI_H)
       MODULE_SYMBOLS="$MODULE_SYMBOLS -DMPICH_IGNORE_CXX_SEEK"
   fi     
   dnl check for mpi Compiler batch
   AC_PATH_PROG(CXX, mpicxx, "x", ${MPI_DIR}/bin)
   if test x$CXX = xx; then
     AC_MSG_FAILURE(MPI compiler not found)
   fi


   AC_MSG_CHECKING([MPI installation])
   AC_LINK_IFELSE([
	AC_LANG_PROGRAM([[
	   #include <stdio.h>
	   #include <mpi.h>
	   int argc = 1;
	   char *argv[1];
	   char **p[]={argv};
	]],
	[[
	   int node;

	   MPI_Init(&argc,p);
	   MPI_Comm_rank(MPI_COMM_WORLD, &node);
     
	   printf("Hello World from Node %d\n",node);
            
	   MPI_Finalize();
	 ]])],
	[
	    AC_MSG_RESULT(ok)
	    AC_DEFINE(HAVE_MPI_H)
	],
	[
	    AC_MSG_RESULT(no)
	    AC_MSG_FAILURE(MPI installation test failed)
       ])
fi


dnl --------------------------------------------------------------------
dnl Search for petsc module
dnl --------------------------------------------------------------------
if test x$petsc_module = xyes; then

  AC_MSG_CHECKING(PETSc module location)
  
 dnl set PETSC_DIR if not set before
 dnl : ${PETSC_DIR=$PWD/../petsc} 
  if test -f ${PETSC_DIR}/include/petscksp.h; then
    AC_MSG_RESULT(${PETSC_DIR})
  else
    while test ! -f ${PETSC_DIR}/include/petscksp.h; do
      echo "Directory ${PETSC_DIR} does not seem to be PETSC dir."
      echo "Type in directory (use absolute path):"
      read PETSC_DIR
    done;
  fi
  dnl PETSC_ARCH=`PETSC_DIR=${PETSC_DIR} ${PETSC_DIR}/bin/petscarch`
  dnl PETSC_MAKE_INCLUDE="include ${PETSC_DIR}/conf/base"
  PETSC_MAKE_INCLUDE="include ${PETSC_DIR}/conf/variables ${PETSC_DIR}/conf/rules"    
  PETSC_INCLUDES="\${PETSC_CC_INCLUDES}"
  AC_MSG_CHECKING(PETSC_ARCH)
  if test -f ${PETSC_DIR}/$PETSC_ARCH/lib/libpetsc.a; then
    AC_MSG_RESULT(${PETSC_ARCH})
  elif test -f ${PETSC_DIR}/$PETSC_ARCH/lib/libpetsc.so; then
    AC_MSG_RESULT(${PETSC_ARCH})
  else
    while test ! -f ${PETSC_DIR}/$PETSC_ARCH/lib/libpetsc.a; do
      echo "PETSC_ARCH ${PETSC_ARCH} does not seem to be available."
      echo "Type in available PETSC_ARCH:"
      read PETSC_ARCH
    done;
    AC_MSG_RESULT(${PETSC_ARCH})
  fi
fi


dnl --------------------------------------------------------------------
dnl Search for slepc module
dnl --------------------------------------------------------------------
if test x$slepc_module = xyes; then

  AC_MSG_CHECKING(SLEPc module location)
  
 dnl set SLEPC_DIR if not set before
 dnl : ${SLEPC_DIR=$PWD/../slepc} 
  if test -f ${SLEPC_DIR}/include/slepceps.h; then
    AC_MSG_RESULT(${SLEPC_DIR})
  else
    while test ! -f ${SLEPC_DIR}/include/slepceps.h; do
      echo "Directory ${SLEPC_DIR} does not seem to be SLEPc dir."
      echo "Type in directory (use absolute path):"
      read SLEPC_DIR
    done;
  fi

  AC_MSG_CHECKING(SLEPc module PETSc configuration)
  SLEPC_MAKE_INCLUDE="include ${SLEPC_DIR}/conf/slepc_common_variables"
  SLEPC_INCLUDES="\${SLEPC_INCLUDE}"
  if test -f ${SLEPC_DIR}/$PETSC_ARCH/lib/libslepc.a; then
    AC_MSG_RESULT(${PETSC_ARCH})
  else
    while test ! -f ${SLEPC_DIR}/$PETSC_ARCH/lib/libslepc.a; do
      echo "SLEPc does not seem to be configured with ${PETSC_ARCH}"
      echo "Type in available PETSC_ARCH:"
      read PETSC_ARCH
    done;
    AC_MSG_RESULT(${PETSC_ARCH})
  fi
fi


dnl --------------------------------------------------------------------
dnl Search for parmetis module
dnl --------------------------------------------------------------------
if test x$parmetis_module = xyes; then

  dnl parmetis requires mpi
  AC_MSG_CHECKING(ParMETIS module location)

dnl  PARMETIS_DIR=$PWD/../ParMETIS
  if test -f ${PARMETIS_DIR}/include/parmetis.h && test -f ${PARMETIS_DIR}/lib/libparmetis.a ; then
    PARMETIS_INCLUDES="-I${PARMETIS_DIR}/include"
    PARMETIS_LIB="${PARMETIS_DIR}/lib/libparmetis.a ${PARMETIS_DIR}/lib/libmetis.a"
  else
    if test -f ${PARMETIS_DIR}/parmetis.h; then
      AC_MSG_RESULT(${PARMETIS_DIR})
    else 
      while test ! -f ${PARMETIS_DIR}/parmetis.h; do
        echo "Directory ${PARMETIS_DIR} does not seem to be ParMetis dir."
        echo "Type in directory (use absolute path):"
        read PARMETIS_DIR
      done;
    fi
    PARMETIS_INCLUDES="-I${PARMETIS_DIR}"
    PARMETIS_LIB="${PARMETIS_DIR}/libparmetis.a ${PARMETIS_DIR}/libmetis.a "
fi
fi



dnl
dnl oofeg active - check graphics libraries
dnl
if test x$oofeg_val = xyes; then
AC_ARG_ENABLE(oofeg-devel-interface, [  --enable-oofeg-devel-interface   enables devel oofeg interface],
     [
         oofeg_di=$enableval
     ]
)

dnl --------------------------------------------------------------------
dnl  X11 libraries
dnl --------------------------------------------------------------------
AC_PATH_XTRA
dnl Replace `main' with a function in -lX11:
dnl AC_CHECK_LIB(X11, main)
dnl Replace `main' with a function in -lXaw:
dnl AC_CHECK_LIB(Xaw, XawDialogGetValueString)
dnl Replace `main' with a function in -lXext:
dnl AC_CHECK_LIB(Xext, main)
dnl Replace `main' with a function in -lXmu:
dnl AC_CHECK_LIB(Xmu, main)
dnl Replace `main' with a function in -lXt:
dnl AC_CHECK_LIB(Xt, XtNameToWidget)

AC_CHECK_LIB(Xt, XtNameToWidget, 
    [
        AC_DEFINE(HAVE_LIBX)
        X_LIBS="$X_LIBS -lXaw -lXmu -lXt -lXext -lX11"
    ],
    [
        AC_MSG_WARN(No support for X11 libraries)
    ], 
    $X_PRE_LIBS $X_LIBS -lXaw -lXmu -lXt -lXext -lX11 $X_EXTRA_LIBS
)


dnl --------------------------------------------------------------------
dnl Must have Ckit. If not in standard places, the user must supply path
dnl --------------------------------------------------------------------
dnl --------------------------------------------------------------------
dnl Check for ckit and elixir libs location
dnl --------------------------------------------------------------------
AC_ARG_WITH(CKITDIR, [  --with-CKITDIR=dir      allows to specify CKIT_DIR] , 
 [
     CKIT_DIR=$withval
 ]
)

AC_ARG_WITH(ELIXIRDIR, [  --with-ELIXIRDIR=dir    allows to specify ELIXIR_DIR] , 
 [
     ELIXIR_DIR=$withval
 ]
)



CKIT_INCLUDES="-I."
AC_CHECK_HEADER(ckitcfg.h,
    [
        AC_DEFINE(HAVE_CKIT_H)
    ],
    [
        dir=$CKIT_DIR/include
        AC_MSG_CHECKING(guess of Ckit includes location)
        if test -f $dir/ckitcfg.h; then
            AC_MSG_RESULT($dir)
        else
            while test ! -f $dir/ckitcfg.h; do
                echo "Ckit includes not found in $dir."
                echo "Type in directory (use absolute path):"
                read dir
            done;
        fi
        CKIT_INCLUDES="-I$dir"
        AC_DEFINE(HAVE_CKIT_H)
    ]
)

CKIT_LIB="-L?"
AC_CHECK_LIB(ckit, _get_list_next,
    [
        CKIT_LIB="-lckit"
        AC_DEFINE(HAVE_LIBCKIT)
    ],
    [
        dir=$CKIT_DIR/src
        AC_MSG_CHECKING(guess of libckit.a location)
        if test -f $dir/libckit.a; then
            AC_MSG_RESULT($dir)
        else    
            while test ! -f $dir/libckit.a; do
                echo "Ckit library not found in $dir."
                echo "Type in directory (use absolute path):"
                read dir
            done;
        fi
        CKIT_LIB="$dir/libckit.a"
        AC_DEFINE(HAVE_LIBCKIT)
    ]
)

dnl
dnl --------------------------------------------------------------------
dnl Must have Elixir. If not in standard places, the user must supply path
dnl --------------------------------------------------------------------
dnl

ELIXIR_INCLUDES="-I."
AC_CHECK_HEADER(Ecfg.h,
    [
        AC_DEFINE(HAVE_ELIXIR_H)
    ],
    [
        dir=$ELIXIR_DIR/include
        AC_MSG_CHECKING(guess of Elixir includes location)
        if test -f $dir/Ecfg.h; then
            AC_MSG_RESULT($dir)
        else
            while test ! -f $dir/Ecfg.h; do
                echo "Elixir includes not found in $dir."
                echo "Type in directory (use absolute path):"
                read dir
            done;
        fi
        ELIXIR_INCLUDES="-I$dir"
        AC_DEFINE(HAVE_ELIXIR_H)
    ]
)


cat > elixirtest.c << EOF
#include <X11/Intrinsic.h>
void ESICustomize(Widget pp){}
EOF

ELIXIR_LIB="-L?"
AC_CHECK_LIB(elixir, ElixirInit,
    [
        ELIXIR_LIB="-lelixir"
        AC_DEFINE(HAVE_LIBELIXIR)
    ],
    [
        dir=$ELIXIR_DIR/src
        AC_MSG_CHECKING(guess of libelixir.a location)
        if test -f $ELIXIR_DIR/lib/libelixir.a; then
            dir=$ELIXIR_DIR/lib
            AC_MSG_RESULT($ELIXIR_DIR/lib);
        elif test -f $dir/libelixir.a; then
            AC_MSG_RESULT($dir)
        else
            while test ! -f $dir/libelixir.a; do
                echo "Elixir library not found in $dir."
                echo "Type in directory (use absolute path):"
                read dir
            done;
        fi
        ELIXIR_LIB="$dir/libelixir.a"
        AC_DEFINE(HAVE_LIBELIXIR)
    ],
    elixirtest.c -lesi -lelixir $CKIT_LIB $X_PRE_LIBS $X_LIBS $X_EXTRA_LIBS
)

ESI_LIB="-L?"
AC_CHECK_LIB(esi, ESIBuildInterface,
    [
        ESI_LIB="-lesi"
        AC_DEFINE(HAVE_LIBESI)
    ],
    [
        dir=$ELIXIR_DIR/src
        AC_MSG_CHECKING(guess of libesi.a location)
        if test -f $ELIXIR_DIR/lib/libesi.a; then
            dir=$ELIXIR_DIR/lib
            AC_MSG_RESULT($ELIXIR_DIR/lib);
        elif test -f $dir/libesi.a; then
            AC_MSG_RESULT($dir)
        else
            while test ! -f $dir/libesi.a; do
                echo "Esi library not found in $dir."
                echo "Type in directory (use absolute path):"
                read dir
            done;
        fi
        ESI_LIB="$dir/libesi.a"
        AC_DEFINE(HAVE_LIBESI)
    ],
    elixirtest.c -lesi -lelixir $CKIT_LIB $X_PRE_LIBS $X_LIBS $X_EXTRA_LIBS
)

dnl Ordering -lesi -lelixir is relevant

ELIXIR_LIBS="$ESI_LIB $ELIXIR_LIB"
LOCAL_LIBS="${LOCAL_LIBS} ${ELIXIR_LIBS}"
LOCAL_LIBS="${LOCAL_LIBS} ${CKIT_LIB}"

else
     oofeg_val=no
fi



OOFEG_DIRECTIVES=""
if test x$oofeg_di = xyes; then
 OOFEG_DIRECTIVES="-DOOFEG_DEVEL"
fi

dnl
dnl --------------------------------------------------------------------
dnl assemble list of modules
dnl --------------------------------------------------------------------
dnl


TARGET_CONFIG_INCLUDES="-I$OOFEM_DIR/targets/$OOFEM_TARGET/include"
OOFEMLIB_SUBMODULE_INCLUDES="-I$PWD/src/oofemlib/xfem -I$PWD/src/oofemlib/iga -I$PWD/src/tm/cemhyd"
OOFEMLIB_INCLUDES="-I$PWD/src/oofemlib $OOFEMLIB_SUBMODULE_INCLUDES"

SM_INCLUDES="-I$PWD/src/sm"
TM_INCLUDES="-I$PWD/src/tm"
FM_INCLUDES="-I$PWD/src/fm -I$PWD/src/fm/pfem"

MODULE_INCLUDES="$OOFEMLIB_INCLUDES"
OOFEM_LIBS="$PWD/targets/$OOFEM_TARGET/lib/oofemlib/liboofemlib.a"

MODULE_LIST="oofemlib"
MODULE_TOBUILD="oofemlib"    
MODULE_SYMBOLS="$MODULE_SYMBOLS -D__OOFEMLIB_MODULE"

if test x$sm_module = xyes; then
    MODULE_LIST="$MODULE_LIST sm"
    MODULE_TOBUILD="$MODULE_TOBUILD sm"
    MODULE_SYMBOLS="$MODULE_SYMBOLS -D__SM_MODULE"
    MODULE_INCLUDES="$MODULE_INCLUDES $SM_INCLUDES"
    OOFEM_LIBS="$PWD/targets/$OOFEM_TARGET/lib/sm/libsm.a $OOFEM_LIBS"    
    TEST_TARGETS="sm"
fi

if test x$tm_module = xyes; then
    MODULE_LIST="$MODULE_LIST tm"
    MODULE_TOBUILD="$MODULE_TOBUILD tm"
    tinyxml_module=yes
    MODULE_SYMBOLS="$MODULE_SYMBOLS -D__TM_MODULE -D__CEMHYD_MODULE"
    MODULE_INCLUDES="$MODULE_INCLUDES $TM_INCLUDES"
    OOFEM_LIBS="$PWD/targets/$OOFEM_TARGET/lib/tm/libtm.a $OOFEM_LIBS"    
    TEST_TARGETS="$TEST_TARGETS tm"
fi

if test x$sm_module = xyes && test x$tm_module = xyes ; then
    TEST_TARGETS="$TEST_TARGETS tmsm"
fi


if test x$fm_module = xyes; then
    MODULE_LIST="$MODULE_LIST fm"
    MODULE_TOBUILD="$MODULE_TOBUILD fm"
    MODULE_SYMBOLS="$MODULE_SYMBOLS -D__FM_MODULE"
    MODULE_INCLUDES="$MODULE_INCLUDES $FM_INCLUDES"
    OOFEM_LIBS="$PWD/targets/$OOFEM_TARGET/lib/fm/libfm.a $OOFEM_LIBS"    
    TEST_TARGETS="$TEST_TARGETS fm"
fi

if test x$iml_module = xyes; then
    MODULE_LIST="$MODULE_LIST iml"
    MODULE_SYMBOLS="$MODULE_SYMBOLS -D__IML_MODULE"
    IML_MODULE_SYMBOL="-D__IML_MODULE"
    MODULE_INCLUDES="$MODULE_INCLUDES $IML_INCLUDES"
fi

dnl --------------------------------------------------------------------
dnl Search for tinyxml module - required also by tm module
dnl --------------------------------------------------------------------
if test x$tinyxml_module = xyes; then
    AC_MSG_CHECKING(TINYXML module location)
    if test -f ${PWD}/tinyxml/tinyxml.h && test -z ${TINYXML_DIR} ; then
        AC_MSG_RESULT(${PWD}/tinyxml)
        TINYXML_INCLUDES="-I${PWD}/tinyxml"
        TINYXML_DIR="${PWD}/tinyxml"
    elif test -f $TINYXML_DIR/tinyxml.h ; then
          TINYXML_INCLUDES="-I${TINYXML_DIR}"
          AC_MSG_RESULT(${TINYXML_DIR})
    else
        while true; do
            read -p "Type in tinyxml directory (use absolute path):" TINYXML_DIR
            if test -e ${TINYXML_DIR}/tinyxml.h ; then
                TINYXML_INCLUDES="-I${TINYXML_DIR}"
                break;
            else
                echo "tinyxml includes not found under ${TINYXML_DIR}"
            fi
        done
    fi
fi

if test x$tinyxml_module = xyes; then
    MODULE_LIST="$MODULE_LIST tinyxml"
    MODULE_SYMBOLS="$MODULE_SYMBOLS -D__TINYXML_MODULE -DTIXML_USE_STL"
    IML_MODULE_SYMBOL="-D__TINYXML_MODULE"
    MODULE_INCLUDES="$MODULE_INCLUDES $IML_INCLUDES"
fi

if test x$dss_module = xyes; then
    MODULE_LIST="$MODULE_LIST dss"
    MODULE_TOBUILD="$MODULE_TOBUILD dss"
    MODULE_SYMBOLS="$MODULE_SYMBOLS -D__DSS_MODULE"
    DSS_MODULE_SYMBOL="-D__DSS_MODULE"
    MODULE_INCLUDES="$MODULE_INCLUDES $DSS_INCLUDES"
    OOFEM_LIBS="$OOFEM_LIBS $PWD/targets/$OOFEM_TARGET/lib/dss/libdss.a"    
fi

if test x$petsc_module = xyes; then
    MODULE_LIST="$MODULE_LIST petsc"
    MODULE_SYMBOLS="$MODULE_SYMBOLS -D__PETSC_MODULE"
    SPOOLES_MODULE_SYMBOL="-D__PETSC_MODULE"
    MODULE_INCLUDES="$MODULE_INCLUDES \${PETSC_INCLUDES}"
    LOCAL_LIBS="$LOCAL_LIBS \${PETSC_C_SH_LIB_PATH} \${PETSC_LIB}"
fi

if test x$slepc_module = xyes; then
    MODULE_LIST="$MODULE_LIST slepc"
    MODULE_SYMBOLS="$MODULE_SYMBOLS -D__SLEPC_MODULE"
    MODULE_INCLUDES="$MODULE_INCLUDES \${SLEPC_INCLUDE}"
    LOCAL_LIBS="$LOCAL_LIBS \${SLEPC_C_SH_LIB_PATH} \${SLEPC_LIB}"
fi

if test x$parmetis_module = xyes; then
    MODULE_LIST="$MODULE_LIST parmetis"
    MODULE_SYMBOLS="$MODULE_SYMBOLS -D__PARMETIS_MODULE"
    MODULE_INCLUDES="$MODULE_INCLUDES ${PARMETIS_INCLUDES}"
    LOCAL_LIBS="$LOCAL_LIBS ${PARMETIS_LIB}"
fi

if test x$spooles_module = xyes; then
    MODULE_LIST="$MODULE_LIST spooles"
    MODULE_SYMBOLS="$MODULE_SYMBOLS -D__SPOOLES_MODULE"
    SPOOLES_MODULE_SYMBOL="-D__SPOOLES_MODULE"
    MODULE_INCLUDES="$MODULE_INCLUDES $SPOOLES_INCLUDES"
    LOCAL_LIBS="$LOCAL_LIBS $SPOOLES_LIB"
fi

dnl
dnl --------------------------------------------------------------------
dnl Remove CXXFLAGS added by configure if no cflags were specified as configure option
dnl --------------------------------------------------------------------
dnl

if test x$cflags = xno; then
     CXXFLAGS="-O"
fi

dnl get host name
AC_MSG_CHECKING(Determining hostname)
HOST_NAME=`hostname -f`
AC_MSG_RESULT($HOST_NAME)

dnl get version
AC_MSG_CHECKING(OOFEM version)
VERSION=`cat VERSION`
AC_MSG_RESULT($VERSION)

AC_SUBST(srcdir)
AC_SUBST(top_srcdir)
AC_SUBST(host)
AC_SUBST(HOST_NAME)
AC_SUBST(VERSION)

AC_SUBST(TARGET_CONFIG_INCLUDES)
AC_SUBST(OOFEMLIB_SUBMODULE_INCLUDES)
AC_SUBST(OOFEMLIB_INCLUDES)
AC_SUBST(SM_INCLUDES)
AC_SUBST(TM_INCLUDES)
AC_SUBST(FM_INCLUDES)
AC_SUBST(IML_INCLUDES)
AC_SUBST(TINYXML_INCLUDES)
AC_SUBST(TINYXML_DIR)
AC_SUBST(DSS_INCLUDES)
AC_SUBST(SPOOLES_INCLUDES)

AC_SUBST(MODULE_INCLUDES)
AC_SUBST(MODULE_SYMBOLS)
AC_SUBST(MODULE_LIST)
AC_SUBST(MODULE_TOBUILD)
AC_SUBST(TEST_TARGETS)
AC_SUBST(DSS_MODULE_SYMBOL)
AC_SUBST(SPOOLES_MODULE_SYMBOL)

AC_SUBST(OOFEM_LIBS)
AC_SUBST(LOCAL_LIBS)

AC_SUBST(CKIT_LIB)
AC_SUBST(CKIT_INCLUDES)
AC_SUBST(ELIXIR_LIBS)
AC_SUBST(ELIXIR_INCLUDES)
AC_SUBST(OOFEG_DIRECTIVES)

AC_SUBST(CFLAGS)
AC_SUBST(CXXFLAGS)
AC_SUBST(LIBS)
AC_SUBST(x_libraries)
AC_SUBST(x_includes)

AC_SUBST(MPI_INCLUDES)

AC_SUBST(CXX)

AC_SUBST(DSS_DIR)
AC_SUBST(INCLUDES)

AC_SUBST(PETSC_DIR)
AC_SUBST(PETSC_ARCH)
AC_SUBST(PETSC_MAKE_INCLUDE)
AC_SUBST(PETSC_INCLUDES)
AC_SUBST(PETSC_BOPT)

AC_SUBST(SLEPC_DIR)
AC_SUBST(SLEPC_MAKE_INCLUDE)
AC_SUBST(SLEPC_INCLUDES)

AC_SUBST(SPOOLES_DIR)

AC_SUBST(PARMETIS_INCLUDES)
AC_SUBST(PARMETIS_LIB)

AC_SUBST(OOFEM_TARGET)
AC_SUBST(OOFEM_DIR)
AC_SUBST(PROG_NAME)

AC_CONFIG_HEADER(targets/$OOFEM_TARGET/include/oofemcfg.h)
dnl AC_CONFIG_FILES(dss/src/makefile)
dnl AC_OUTPUT(oofemlib/src/makefile sm/src/makefile tm/src/makefile main/src/makefile makefile hmworks/makefile)
AC_OUTPUT(makefile targets/$OOFEM_TARGET/include/oofemdef.h targets/$OOFEM_TARGET/makefile targets/$OOFEM_TARGET/lib/oofemlib/makefile targets/$OOFEM_TARGET/lib/sm/makefile targets/$OOFEM_TARGET/lib/tm/makefile targets/$OOFEM_TARGET/lib/fm/makefile targets/$OOFEM_TARGET/lib/dss/makefile targets/$OOFEM_TARGET/lib/main/makefile)

echo
echo Modules to be included: $MODULE_LIST
echo Target configured: $OOFEM_TARGET
echo PROG_NAME: $PROG_NAME
