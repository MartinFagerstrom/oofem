/*
 *
 *                 #####    #####   ######  ######  ###   ###
 *               ##   ##  ##   ##  ##      ##      ## ### ##
 *              ##   ##  ##   ##  ####    ####    ##  #  ##
 *             ##   ##  ##   ##  ##      ##      ##     ##
 *            ##   ##  ##   ##  ##      ##      ##     ##
 *            #####    #####   ##      ######  ##     ##
 *
 *
 *             OOFEM : Object Oriented Finite Element Code
 *
 *               Copyright (C) 1993 - 2012   Borek Patzak
 *
 *
 *
 *       Czech Technical University, Faculty of Civil Engineering,
 *   Department of Structural Mechanics, 166 29 Prague, Czech Republic
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#ifndef nrsolver2_h
#define nrsolver2_h

#include "sparselinsystemnm.h"
#include "sparsenonlinsystemnm.h"
#include "sparsemtrx.h"
#include "flotarry.h"

#include "linesearch.h"

namespace oofem {
class Domain;
class EngngModel;

/**
 * This class implements the class NumericalMethod instance Newton-Raphson Method
 * for solving non-linear problems. It supports the direct displacements control
 * by applying given BC. The use of this solver for displacement control is somewhat
 * limited since in general the support for changes of static system are needed to
 * allow switching to another type of control.
 * The use of nrsolver.h is recommended. It supports direct displacement control
 * without requiring BC applied.
 */
class NRSolver2 : public SparseNonLinearSystemNM
{
    /*
     * This class implements the class NumericalMethod instance Newton-Raphson Method
     * for solving non-linear problems.
     *
     * DESCRIPTION :
     * Perform solution of non-linear problem.
     *
     * =======>   This method uses Modified Newton Raphson iteration scheme  <======
     *
     * If we solve non-linear static we can interpret symbols as follows:
     *
     * Kt     - tangential stiffness
     * deltaR - increment of displacements
     * g      - vector of unbalanced forces (at the end should be zero one)
     * R      - Load vector (Incremental)
     * R0     - Initial Load vector
     * RT     - TotalLoadVector
     * r      - total displacement vector
     * F(r)   - Nodal representation of (real) internal forces.
     * NR_Mode- variable controlling the mode of NRM (ModifiedNR, Full NRM (stiffness update after each iteration),
     *          Modified Accelerated NRM (we perform iteration with stiffness matrix updated only after calm_MANRMSteps)
     * calm_NR_OldMode - variable containing the old mode of NRM, which will be restored after
     *              calm_NR_ModeTick iterations.
     * calm_NR_ModeTick - see calm_NR_OldMode.
     * calm_MANRMSteps - if calm_NR_Mode == calm_accelNRM, it specifies, that new updated
     *                 stiffness matrix is assembled after calm_MANRMSteps.
     *
     * The load level and corresponding load vector is determined using intrinsic time, which is generated by
     * nonlinear static model.
     *
     *
     * TASKS :
     *
     * - solving problem
     *   solveYourselfAt.
     * - returning results (increment of displacement,
     *                      reached level of loading and so on)
     *
     * Variable description  :
     *
     * K(N,N)    = STIFFNESS MATRIX (ASSUMED POZITIVE DEFINITE)        *
     * deltaR(N) = ITERATIVE INCREMENT OF DISPLACEMENT                 *
     * R         = LOAD VECTOR (Incr.)d                                *
     * R0        = Initial Load Vector                                 *
     * RT        = Total Load Vector                                   *
     * DeltaR    = CURRENT TOTAL INCREMENT                             *
     * F         = NODAL REPRESENTATION OF (REAL) INTERNAL FORCES      *
     *
     * RTOL      = CONVERGENCE TOLERANCE                               *
     *
     * OUTPUT : (after call solveYourselfAt)
     * K(N,N)    = DIAGONALIZED STIFFNESS MATRIX                       *
     * DeltaR    = REACHED DISPLACEMENT INCREMENT                      *
     * nite      = NUMBER OF ITERATIONS REQUIRED TO FULLFIL BALANCE    *
     * status    = NM_status with flags set to reached state (see cltypes.h) *
     *
     */
private:
    enum nrsolver_ModeType { nrsolverModifiedNRM, nrsolverFullNRM, nrsolverAccelNRM };

    int nite, nsmax, minIterations;
    double rtol;
    double minStepLength;
    int solved;
    nrsolver_ModeType NR_Mode, NR_OldMode;
    int NR_ModeTick;
    int MANRMSteps;
    // Linear system solver.
    SparseLinearSystemNM *linSolver;
    // Linear system solver ID.
    LinSystSolverType solverType;
    /// Flag indicating whether to use line-search.
    int lsFlag;
    /// Line search solver.
    LineSearchNM *linesearchSolver;

public:
    NRSolver2(int i, Domain *d, EngngModel *m, EquationID ut);
    virtual ~NRSolver2();

    // Overloaded methods:
    virtual NM_Status solve(SparseMtrx *k, FloatArray *R, FloatArray *R0,
                            FloatArray *X, FloatArray *deltaX, FloatArray *F,
                            double &internalForcesEBENorm, double &l, referenceLoadInputModeType rlm,
                            int &nite, TimeStep *);
    virtual IRResultType initializeFrom(InputRecord *ir);
    virtual contextIOResultType saveContext(DataStream *stream, ContextMode mode, void *obj = NULL);
    virtual contextIOResultType restoreContext(DataStream *stream, ContextMode mode, void *obj = NULL);
    virtual const char *giveClassName() const { return "NRSolver2"; }
    virtual classType giveClassID() const { return NRSolverClass; }
    virtual void setDomain(Domain *d) {
        this->domain = d;
        if ( linSolver ) { linSolver->setDomain(d); } }
    virtual void reinitialize() { if ( linSolver ) { linSolver->reinitialize(); } }

    virtual SparseLinearSystemNM *giveLinearSolver();

protected:
    /// Constructs and returns a line search solver.
    LineSearchNM *giveLineSearchSolver();
};
} // end namespace oofem
#endif // nrsolver2_h
