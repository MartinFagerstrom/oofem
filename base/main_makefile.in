#
# main target makefile
#

.SUFFIXES:  .h .C

SHELL      = /bin/sh
#
PETSC_DIR  = @PETSC_DIR@
PETSC_ARCH = @PETSC_ARCH@
BOPT       = @PETSC_BOPT@
@PETSC_MAKE_INCLUDE@
SLEPC_DIR = @SLEPC_DIR@
@SLEPC_MAKE_INCLUDE@

INCLUDE_DIR= @TARGET_CONFIG_INCLUDES@ @MODULE_INCLUDES@ @TINYXML_INCLUDES@ @CKIT_INCLUDES@ @ELIXIR_INCLUDES@ @MPI_INCLUDES@ @PETSC_INCLUDES@ 
SYMBOLS    = @MODULE_SYMBOLS@
LOCAL_LIBS = @LOCAL_LIBS@
SYS_LIBS   = @LIBS@ @X_PRE_LIBS@ @X_LIBS@ @X_EXTRA_LIBS@ @LIBS@ 
OOFEM_LIBS = @OOFEM_LIBS@
MODULES    = @MODULE_SYMBOLS@
MODULE_LIST= @MODULE_LIST@
HOST_TYPE  = @host@
HOST_NAME  = @HOST_NAME@
#
#Compiler flags
#OPTFLAGS used only for non-debug version
#CFLAGS     = -64 -exceptions -prelink -ptused @MODULE_SYMBOLS@ #required on SGI
CFLAGS        = @CXXFLAGS@ @MODULE_SYMBOLS@ @OOFEG_DIRECTIVES@
#DEBUG_FLAGS   = -g 
# LINUX, GNU
LD         = @CXX@
CC         = @CXX@
#
PROG_NAME  = @PROG_NAME@
RM         = rm -f
ARCHIVE    = OOFEM
MV         = mv
# For large systems, it is often desirable to put sources in a separate
# directory from the binaries.  The "directory search" features of `make'
# facilitate this by searching several directories automatically to find
# a prerequisite.  When you redistribute the files among directories, you
# do not need to change the individual rules, just the search paths.
# The value of the `make' variable `VPATH' specifies a list of
# directories that `make' should search.  Most often, the directories are
# expected to contain prerequisite files that are not in the current
# directory; however, `VPATH' specifies a search list that `make' applies
# for all files, including files which are targets of rules.
#
# Example:
#
# VPATH = .:../mysources

#
# You probably don't need to change anything below here.
#

#######################################################################
INSTALL_DIR        = @OOFEM_DIR@/targets/@OOFEM_TARGET@/bin

MAKEDEPEND= $(CC) -M $(CFLAGS) $(SYMBOLS) $(INCLUDE_DIR) -o $*.d $<
VPATH=@OOFEM_DIR@/src/main

#
# local sources
#
oofemsrc0= main.C oofeg.C usrdefsub.C classfactory.C
#
# Module targets
#
all_src = $(oofemsrc0) 
# obj
all_objs := $(all_src:.C=.o)
all_deps := $(all_src:.C=.d)

all:: $(INSTALL_DIR)/$(PROG_NAME)

-include $(all_deps)

%.o:	%.C
	@$(MAKEDEPEND)
	$(CC) -c $(INCLUDE_DIR) $(CFLAGS) $(RELEASE_FLAGS) $< -o $@

#
# local targets
#

$(INSTALL_DIR)/$(PROG_NAME):  $(all_objs) $(OOFEM_LIBS)
#	rm -fr $@
	@if [ ! -d $(INSTALL_DIR) ]; then mkdir -p $(INSTALL_DIR); fi
	$(LD) $(CFLAGS) $(RELEASE_FLAGS) -o $(INSTALL_DIR)/$(PROG_NAME) $(all_objs) $(OOFEM_LIBS) $(LOCAL_LIBS) $(SYS_LIBS) 
#	$(MV) $(PROG_NAME) $(INSTALL_DIR)

deps:   $(all_deps)

clean::
	rm -fr *.o *.d oofem
